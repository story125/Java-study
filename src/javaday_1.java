
public class javaday_1 {

	public static void main(String[] args) {
// "+" 연산자는 "+" 연산자의 양쪽에 모두 숫자가 나올 경우 덧셈을 하고, 한 쪽이라도 문자열이 나오면 문자열을 연결하는 연결 연산자로 사용된다.
		System.out.println("5 + 3 = " + 5 + 3);
// 연산자 우선순위중에 같은 우선순위에 있으면 왼쪽에 있는 연산자가 먼저 실행이 되니까 "문자열 + 숫자"이므로 "+"는 연결 연산자로 사용이 되어, 문자열로 바뀌게 되고 다음 "+" 또한 "문자열 + 숫자"로 둘 다 문자열로 바뀌어 53이 출력이 된다
//		문자열로 출력을 하지 않으려면 연산자 우선순위를 변경하여야 한다. Ex) 괄호 사용 
		System.out.println("5 + 3 = " + (5 + 3));
		System.out.println("5 - 3 = " + (5 - 3));
		System.out.println("5 * 3 = " + 5 * 3);
		System.out.println("5 / 3 = " + 5 / 3);		// 정수와 정수의 연산은 결과도 정수다. 묵시적 형변환
		System.out.println("5 % 3 = " + 5 % 3);		// 나머지
		
//		묵시적 형변환: 자료형의 크기가 서로 다른 자료의 연산 결과는 크기가 큰 자료형으로 자동 변환된다.
//		자바의 기본 자료형	
//		boolean : 1바이트(8비트), true or false로 기억 0 또는 1
//		char: 2바이트(C는 4바이트 = 아스키 코드 자바는 유니코드), 1문자를 기억
//		short: 2바이트, -32768 ~ 32767 사이의 정수 기억
//		int: 4바이트, - 2의 32승 ~ + 2의 32승 - 1 
//		long: 8바이트,
//		float: 4바이트 단정도 실수, 소수점 아래로 6자리 정도를 표현한다
//		double: 8바이트 배정도 실수, 소수점 아래로 16자리 정도를 표현한다 float 보다 더 정밀한 연산이 가능하다.
		System.out.println("5 / 3 = " + 5 / 3.);
		System.out.println("5 / 3 = " + 5. / 3);
//		5. = 5.0 
		System.out.println("A + 32 = " + ('A' + 32));
		
//		명시적 형변환: 프로그래머가 그 순간의 자료형을 변경할 수 있다. casting, 형변환
		System.out.println("5 / (double)3 = " + 5 / (double)3);
		System.out.println("A + 32 = " + (char)('A' + 32));
// 		서식 있는 출력(printf() ==> C언어의 printf 사용법과 같다.)
//		printf("출력서식",출력할 내용)
//		출력 서식은 출력 서식문자를 제외한 나머지 문자는 입력한 그대로 출력된다.
//		출력 서식 문자: d(정수), f(실수), c(문자), s(문자열)
//		출력 서식의 형식: %[-][0][n][.m] 서식문자
//		- : 출력할 전체 자리수가 지정된 경우 왼쪽에 맞춰 출력한다.
//		0 : 출력할 전체 자리수가 지정될 경우 왼쪽에 남는 자리에 1을 채워 출력한다.
//		n : 출력할 전체 자리수
//		.m : 소수점 아래 자리수, 잘리는 자리에서 반올림시켜 출력한다. 원래 데이터 값은 변경되지 않는다.
		System.out.printf("5 / 3 = %d", 5 + 3);


	}
}
